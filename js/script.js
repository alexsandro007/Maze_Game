const gameBoard = document.getElementById('gameBoard');
const widthInput = document.getElementById('widthInput');
const heightInput = document.getElementById('heightInput');
const startButton = document.getElementById('startButton');
const restartButton = document.getElementById('restartButton');
const levelDisplay = document.getElementById('levelDisplay');
const gameMessage = document.getElementById('gameMessage');

// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let width = parseInt(widthInput.value);
let height = parseInt(heightInput.value);
let level = 1;
let wallsCount = 1;
let playerPos = { x: 0, y: 0 };
let finishPos = { x: width - 1, y: height - 1 };
let walls = [];
let gameActive = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
     width = parseInt(widthInput.value);
     height = parseInt(heightInput.value);
     level = 1;
     wallsCount = 1;
     playerPos = { x: 0, y: 0 };
     finishPos = { x: width - 1, y: height - 1 };
     walls = [];
     gameActive = false;
     levelDisplay.textContent = level;
     gameMessage.textContent = '';
     generateBoard();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function generateBoard() {
     gameBoard.innerHTML = '';
     gameBoard.style.gridTemplateColumns = `repeat(${width}, 40px)`;
     gameBoard.style.gridTemplateRows = `repeat(${height}, 40px)`;

     // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
     for (let y = 0; y < height; y++) {
          for (let x = 0; x < width; x++) {
               const cell = document.createElement('div');
               cell.classList.add('cell');
               cell.dataset.x = x;
               cell.dataset.y = y;
               gameBoard.appendChild(cell);
          }
     }

     // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏ —Ñ–∏–Ω–∏—à
     updateCell(playerPos, 'üòä');
     updateCell(finishPos, 'üèÅ');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
function updateCell(pos, content) {
     const cell = document.querySelector(`.cell[data-x="${pos.x}"][data-y="${pos.y}"]`);
     if (cell) {
          cell.textContent = content;
     }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–µ–Ω
function generateWalls() {
     walls = [];
     for (let i = 0; i < wallsCount; i++) {
          let wallPos;
          do {
               wallPos = {
                    x: Math.floor(Math.random() * width),
                    y: Math.floor(Math.random() * height),
               };
          } while (
               (wallPos.x === playerPos.x && wallPos.y === playerPos.y) ||
               (wallPos.x === finishPos.x && wallPos.y === finishPos.y) ||
               walls.some(wall => wall.x === wallPos.x && wall.y === wallPos.y)
          );
          walls.push(wallPos);
          const cell = document.querySelector(`.cell[data-x="${wallPos.x}"][data-y="${wallPos.y}"]`);
          cell.classList.add('wall');
     }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–æ–π
function checkCollision(pos) {
    return walls.some(wall => wall.x === pos.x && wall.y === pos.y);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–æ–ª—è
function checkOutOfBounds(pos) {
    return pos.x < 0 || pos.x >= width || pos.y < 0 || pos.y >= height;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ñ–∏–Ω–∏—à–∞
function checkWin(pos) {
    return pos.x === finishPos.x && pos.y === finishPos.y;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
document.addEventListener('keydown', (event) => {
     if (!gameActive) return;

     let newPos = { ...playerPos };

     switch (event.key) {
          case 'ArrowUp':
               newPos.y--;
               break;
          case 'ArrowDown':
               newPos.y++;
               break;
          case 'ArrowLeft':
               newPos.x--;
               break;
          case 'ArrowRight':
               newPos.x++;
               break;
          default:
               return;
     }

     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
     if (checkOutOfBounds(newPos)) {
          gameMessage.textContent = 'Game Over: Out of bounds!';
          gameActive = false;
          return;
     }

     // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–æ–π
     if (checkCollision(newPos)) {
          gameMessage.textContent = 'Game Over: Hit a wall!';
          gameActive = false;
          return;
     }

     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ñ–∏–Ω–∏—à–∞
     if (checkWin(newPos)) {
          level++;
          wallsCount++;
          levelDisplay.textContent = level;
          gameMessage.textContent = `Level ${level - 1} Complete! Starting Level ${level}...`;
          playerPos = { x: 0, y: 0 };
          finishPos = { x: width - 1, y: height - 1 };
          generateBoard();
          generateWalls();
          return;
     }

     // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
     updateCell(playerPos, '');
     playerPos = newPos;
     updateCell(playerPos, 'üòä');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
startButton.addEventListener('click', () => {
    initGame();
    generateWalls();
    gameActive = true;
    gameMessage.textContent = 'Use arrow keys to move!';
});

restartButton.addEventListener('click', () => {
    initGame();
    generateWalls();
    gameActive = true;
    gameMessage.textContent = 'Use arrow keys to move!';
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
initGame();